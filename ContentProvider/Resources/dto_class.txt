/*
 * Copyright (c) 2013 Remel Pugh
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package {0}.data.DTO;

import android.content.ContentValues;
import android.database.Cursor;
import android.os.Parcel;
import android.os.Parcelable;
import android.text.TextUtils;
import {6};
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

@SuppressWarnings("unused")
public class {1}DTO implements Parcelable {{
    public static final Parcelable.Creator<{1}DTO> CREATOR = new Parcelable.Creator<{1}DTO>() {{
        public {1}DTO createFromParcel(final Parcel in) {{
            return new {1}DTO(in);
        }}

        public {1}DTO[] newArray(final int size) {{
            return new {1}DTO[size];
        }}
    }};
{2}
    public {1}DTO() {{
    }}

    public {1}DTO(final Parcel in) {{
{4}    }}

{3}
    public int describeContents() {{
        return 0;
    }}

    @Override
    public String toString() {{
        final GsonBuilder builder = new GsonBuilder();
        final Gson gson;

        gson = builder.create();

        return gson.toJson(this);
    }}

    public void writeToParcel(final Parcel dest, final int flags) {{
{5}    }}

    public static ContentValues buildContentValues(final {1}DTO {8}) {{
        final ContentValues values = new ContentValues();
        String name;

{9}        return values;
    }}

    public static {1}DTO newInstance(final Cursor cursor) {{
        final {1}DTO {8};
        int index;

        if (cursor == null) {{
            throw new IllegalStateException("Cursor can not be null.");
        }}
        else if (cursor.isBeforeFirst() || cursor.isAfterLast()) {{
            if (!cursor.moveToFirst()) {{
                throw new IllegalStateException("Cursor can not be empty");
            }}
        }}

        {8} = new {1}DTO();
{7}
        return {8};
    }}
}}