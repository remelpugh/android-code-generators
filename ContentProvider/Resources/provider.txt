/*
 * Copyright (c) 2013 Remel Pugh
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */

package {0}.{8};

import android.content.*;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.database.sqlite.SQLiteStatement;
import android.net.Uri;
import android.util.Log;
{1}import {0}.{12}.SelectionBuilder;
import {0}.{12}.UriType;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

/**
 */
 @SuppressWarnings("unused")
public class {2}Provider extends ContentProvider {{
    public static final String AUTHORITY = "{3}.provider";
    // Version 1 : Creation of the databaseInfo
{10}    public static final String DATABASE_NAME = "{11}.db";
    public static final int DATABASE_VERSION = {9};
    public static final Uri INTEGRITY_CHECK_URI = Uri.parse("content://" + AUTHORITY + "/integrityCheck");    
    private static final String LOG_TAG = {2}Provider.class.getSimpleName();
{4}
    protected SQLiteDatabase databaseInfo;
    protected UriMatcher uriMatcher;
    protected HashMap<Integer, UriType> uriTypes;

    /**
     * {{@inheritDoc}}
     */
    @Override
    public ContentProviderResult[] applyBatch(final ArrayList<ContentProviderOperation> operations) 
            throws OperationApplicationException {{
        final SQLiteDatabase db = getDatabase(getContext());

        db.beginTransaction();

        try {{
            final int numOperations = operations.size();
            final ContentProviderResult[] results = new ContentProviderResult[numOperations];

            for (int i = 0; i < numOperations; i++) {{
                results[i] = operations.get(i).apply(this, results, i);
                db.yieldIfContendedSafely();
            }}

            db.setTransactionSuccessful();

            return results;
        }}
        finally {{
            db.endTransaction();
        }}
    }}
    
    /**
     * {{@inheritDoc}}
     */
    @Override
    public int bulkInsert(final Uri uri, final ContentValues[] values) {{
        final Context context = getContext();
        final SQLiteDatabase db = getDatabase(context);
        final SQLiteStatement insertStmt;
        final int match = matchUri(uri);
        int numberInserted = 0;

        db.beginTransaction();

        try {{
            switch (match) {{
{7}                default: {{
                    throw new IllegalArgumentException("Unknown URI " + uri);
                }}
            }}
        }}
        finally {{
            db.endTransaction();
        }}

        // Notify with the base uri, not the new uri (nobody is watching a new record)
        context.getContentResolver().notifyChange(uri, null);

        return numberInserted;
    }}
    
    /**
     * {{@inheritDoc}}
     */
    @Override
    public int delete(final Uri uri, final String selection, final String[] selectionArgs) {{
        final Context context = getContext();
        final SQLiteDatabase db = getDatabase(context);
        final SelectionBuilder builder = buildSimpleSelection(uri);
        final int result;

        result = builder.where(selection, selectionArgs).delete(db);

        context.getContentResolver().notifyChange(uri, null);

        return result;
    }}

    public synchronized SQLiteDatabase getDatabase(final Context context) {{
        // Always return the cached databaseInfo, if we've got one
        if (databaseInfo == null || !databaseInfo.isOpen()) {{
            final DatabaseHelper helper = new DatabaseHelper(context, DATABASE_NAME, DATABASE_VERSION);

            databaseInfo = helper.getWritableDatabase();
		}}

        return databaseInfo;
    }}
    
    /**
     * {{@inheritDoc}}
     */
    @Override
    public String getType(final Uri uri) {{
        return uriTypes.get(matchUri(uri)).getType();
    }}
    
    /**
     * {{@inheritDoc}}
     */
    @Override
    public Uri insert(final Uri uri, final ContentValues values) {{
        final Context context = getContext();
        final long id;
        final SQLiteDatabase db = getDatabase(context);
        final int match = matchUri(uri);
        final Uri resultUri;

        switch (match) {{
{6} {{
                id = db.insertOrThrow(uriTypes.get(match).getTableName(), "foo", values);
                resultUri = id == -1 ? null : ContentUris.withAppendedId(uri, id);
                break;
            }}
            default: {{
                throw new IllegalArgumentException("Unknown URI " + uri);
            }}
        }}

        // Notify with the base uri, not the new uri (nobody is watching a new record)
        context.getContentResolver().notifyChange(uri, null);

        return resultUri;
    }}
    
    /**
     * {{@inheritDoc}}
     */
    @Override
    public boolean onCreate() {{
        uriMatcher = buildUriMatcher();

        return true;
    }}

    /**
     * {{@inheritDoc}}
     */
    @Override
    public Cursor query(final Uri uri, final String[] projection, final String selection, final String[] selectionArgs, 
                        final String sortOrder) {{
        final Context context = getContext();
        final Cursor cursor;
        final SQLiteDatabase db = getDatabase(context);
        final int match = matchUri(uri);

        switch (match) {{
            default: {{
                final SelectionBuilder builder = buildExpandedSelection(uri, uriTypes.get(match));

                cursor = builder.where(selection, selectionArgs).query(db, projection, sortOrder);
            }}
        }}

        if ((cursor != null) && !isTemporary()) {{
            cursor.setNotificationUri(context.getContentResolver(), uri);
        }}

        return cursor;
    }}
    
    /**
     * {{@inheritDoc}}
     */
    @Override
    public int update(final Uri uri, final ContentValues values, final String selection, final String[] selectionArgs) {{
        final Context context = getContext();
        final SQLiteDatabase db = getDatabase(context);
        final SelectionBuilder builder = buildSimpleSelection(uri);
        final int result;

        result = builder.where(selection, selectionArgs).update(db, values);

        context.getContentResolver().notifyChange(uri, null);

        return result;
    }}

    /**
     * 
     * @param uri
     * @param uriType
     * @return
     */
    protected SelectionBuilder buildExpandedSelection(final Uri uri, final UriType uriType) {{
        final SelectionBuilder builder = new SelectionBuilder();

        switch (uriType.getCode()) {{
{13} {{       
                final String id = uri.getPathSegments().get(1);

                return builder.table(uriType.getTableName()).where(uriType.getIdColumnName() + " = ?", id);
            }}
{14} {{
                return builder.table(uriType.getTableName());
            }}
{15}{16}            default: {{
                throw new UnsupportedOperationException("Unknown uri: " + uri);
            }}
        }}
    }}

    /**
     * 
     * @param uri
     * @return
     */
    protected SelectionBuilder buildSimpleSelection(final Uri uri) {{
        final SelectionBuilder builder = new SelectionBuilder();
        final int match = matchUri(uri);

        switch (match) {{
{5} {{               
                final String id = uri.getPathSegments().get(1);
                final UriType uriType = uriTypes.get(match);

                return builder.table(uriType.getTableName()).where(uriType.getIdColumnName() + " = ?", id);
            }}
{6} {{
                final UriType uriType = uriTypes.get(match);

                return builder.table(uriType.getTableName());
            }}
            default: {{
                throw new UnsupportedOperationException("Unknown uri: " + uri);
            }}
        }}
    }}

    /**
     * 
     * @return
     */
    protected UriMatcher buildUriMatcher() {{
        final UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH);
        final Iterator iterator;

        uriTypes = new HashMap<Integer, UriType>();
{17}

        iterator = uriTypes.entrySet().iterator();
        while (iterator.hasNext()) {{
            final Map.Entry entry = (Map.Entry)iterator.next();
            final UriType uriType = (UriType) entry.getValue();

            matcher.addURI(AUTHORITY, uriType.getMatchPath(), uriType.getCode());
        }}

        return matcher;
    }}

    /**
     * 
     * @param uri
     * @return
     */
    protected int matchUri(final Uri uri) {{
        final int match = uriMatcher.match(uri);

        if (match < 0) {{
            throw new IllegalArgumentException("Unknown URI " + uri);
        }}

        return match;
    }}
}}